#!/usr/bin/env python

import sys, re

CVSSv2 = {
    'AV': {'L': 0.395, 'A': 0.646, 'N': 1.000},
    'AC': {'H': 0.350, 'M': 0.610, 'L': 0.710},
    'Au': {'M': 0.450, 'S': 0.560, 'N': 0.704},
    'C':  {'N': 0.000, 'P': 0.275, 'C': 0.660},
    'I':  {'N': 0.000, 'P': 0.275, 'C': 0.660},
    'A':  {'N': 0.000, 'P': 0.275, 'C': 0.660},

    'E':  {'U':  0.850, 'POC': 0.900, 'F': 0.950, 'H':  1.000, 'ND': 1.000},
    'RL': {'OF': 0.870, 'TF':  0.900, 'W': 0.950, 'U':  1.000, 'ND': 1.000},
    'RC': {'UC': 0.900, 'UR':  0.950, 'C': 1.000, 'ND': 1.000},

    'CDP': {'N': 0, 'L': 0, 'LM': 0, 'MH':  0, 'H':  0, 'ND': 0},
    'TD':  {'N': 0, 'L': 0, 'M':  0,  'H':  0, 'ND': 0},
    'CR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
    'IR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
    'AR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
}

VERBOSE_FLAG = False

def verbose(msg):
    if VERBOSE_FLAG:
        print(msg)

def parse_v2(vector):
    cvss = {}
    for piece in vector.split('/'):
        try:
            (key, value) = piece.split(':')
        except:
            print('Invalid metric "' + piece + '".')
            sys.exit(1)
        if key not in CVSSv2.keys():
            print('Unknown metric "' + key + '".')
            sys.exit(1)
        if value not in CVSSv2[key].keys():
            print(
                'Invalid value "' + value
                + '" for metric "' + key + '". '
                + "Available values: " + ', '.join(sorted(CVSSv2[key].keys())))
            sys.exit(1)
        if key in cvss:
            print('Duplicate metric "' + key + '".')
            sys.exit(1)
        cvss[key] = CVSSv2[key][value]
    required_metrics = ['AV', 'AC', 'Au', 'C', 'I', 'A']
    for given_metric in cvss.keys():
        if given_metric in required_metrics:
            required_metrics.remove(given_metric)
    if required_metrics:
        print('Missing required metrics: ' + ', '.join(sorted(required_metrics)))
        sys.exit(1)
    return cvss

def score_v2(cvss):
    impact = 10.41 * (1 -
        (1 - cvss['C'])
        * (1 - cvss['I'])
        * (1 - cvss['A']))
    verbose('Impact score:' + str(round(impact, 1)))
    exploitability = 20 * cvss['AV'] * cvss['AC'] * cvss['Au']
    verbose('Exploitability score:' + str(round(exploitability, 1)))
    f_impact = 0 if impact == 0 else 1.176
    base_score = round(
        ((0.6 * impact) + (0.4 * exploitability) - 1.5) * f_impact,
        1)
    verbose('Base score:' + str(base_score))
    temporal_score = round(
        base_score
        * (cvss['E']  if 'E'  in cvss else CVSSv2['E']['ND'])
        * (cvss['RL'] if 'RL' in cvss else CVSSv2['RL']['ND'])
        * (cvss['RC'] if 'RC' in cvss else CVSSv2['RC']['ND'])
        , 1)
    verbose('Temporal score:' + str(temporal_score))
    return temporal_score

if len(sys.argv) == 1:
    print('No args')
elif len(sys.argv) == 2:
    vector = sys.argv[1]
    overall_cvss_score = score_v2(parse_v2(vector))
    if VERBOSE_FLAG:
        print('Overall CVSS score:' + str(overall_cvss_score))
    else:
        print(overall_cvss_score)
else:
    print('Wrong usage')
