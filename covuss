#!/usr/bin/env python

import sys
import re
import argparse
from copy import deepcopy

CVSSv2_BASE_METRICS = ['AV', 'AC', 'Au', 'C', 'I', 'A']
CVSSv2_TEMPORAL_METRICS = ['E', 'RL', 'RC']
CVSSv2_ENVIRONMENTAL_METRICS = ['CDP', 'TD', 'CR', 'IR', 'AR']
CVSSv2 = {
    'AV': {'L': 0.395, 'A': 0.646, 'N': 1},
    'AC': {'H': 0.35,  'M': 0.61,  'L': 0.71},
    'Au': {'M': 0.45,  'S': 0.56,  'N': 0.704},
    'C':  {'N': 0,     'P': 0.275, 'C': 0.66},
    'I':  {'N': 0,     'P': 0.275, 'C': 0.66},
    'A':  {'N': 0,     'P': 0.275, 'C': 0.66},

    'E':  {'U':  0.85, 'POC': 0.9,  'F': 0.95, 'H':  1, 'ND': 1},
    'RL': {'OF': 0.87, 'TF':  0.9,  'W': 0.95, 'U':  1, 'ND': 1},
    'RC': {'UC': 0.9,  'UR':  0.95, 'C': 1,    'ND': 1},

    'CDP': {'N': 0, 'L': 0.1, 'LM': 0.3, 'MH': 0.4, 'H': 0.5, 'ND': 0},
    'TD':  {'N': 0, 'L': 0.25, 'M': 0.75, 'H': 1, 'ND': 1},
    'CR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
    'IR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
    'AR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
}

DETAIL_FLAG = False


def error(msg):
    print(msg)
    sys.exit(1)

def verbose_score(msg, score):
    if DETAIL_FLAG:
        print(msg + ':' + str(round(score, 1)))


def parse_v2_check_required(cvss):
    required_metrics = deepcopy(CVSSv2_BASE_METRICS)
    for given_metric in cvss:
        if given_metric in required_metrics:
            required_metrics.remove(given_metric)
    if required_metrics:
        error(
            'Missing required metrics: ' + ', '.join(sorted(required_metrics)))


def parse_v2_fill_not_defined(cvss):
    for metric in CVSSv2:
        if metric not in cvss and 'ND' in CVSSv2[metric]:
            cvss[metric] = 'ND'


def parse_v2(vector):
    cvss = {}
    for piece in vector.split('/'):
        try:
            (key, value) = piece.split(':')
        except:
            error('Invalid metric "' + piece + '".')
        if key not in CVSSv2:
            error('Unknown metric "' + key + '".')
        if value not in CVSSv2[key]:
            error(
                'Invalid value "' + value
                + '" for metric "' + key + '". '
                + "Available values: " + ', '.join(sorted(CVSSv2[key])))
        if key in cvss:
            error('Duplicate metric "' + key + '".')
        cvss[key] = value
    parse_v2_check_required(cvss)
    parse_v2_fill_not_defined(cvss)
    return cvss


def cvss_v2_to_vector(cvss):
    vector = ""
    pieces = []
    for metric in CVSSv2_BASE_METRICS:
        pieces.append(metric + ':' + cvss[metric])
    if contains_v2_temporal(cvss):
        for metric in CVSSv2_TEMPORAL_METRICS:
            pieces.append(metric + ':' + cvss[metric])
    if contains_v2_environmental(cvss):
        for metric in CVSSv2_ENVIRONMENTAL_METRICS:
            pieces.append(metric + ':' + cvss[metric])
    return '/'.join(pieces)


def score_v2_evaluate(cvss):
    """ Replaces symbolic values with respective numbers """
    evaluated_cvss = {}
    for metric in cvss:
        evaluated_cvss[metric] = CVSSv2[metric][cvss[metric]]
    return evaluated_cvss


def score_v2_base(cvss):
    impact = 10.41 * (1 - (1 - cvss['C']) * (1 - cvss['I']) * (1 - cvss['A']))
    verbose_score('Impact score', impact)
    exploitability = 20 * cvss['AV'] * cvss['AC'] * cvss['Au']
    verbose_score('Exploitability score', exploitability)
    f_impact = 0 if impact == 0 else 1.176
    return (
        round(
            ((0.6 * impact) + (0.4 * exploitability) - 1.5) * f_impact, 1),
        exploitability,
        f_impact)


def score_v2_temporal(base, cvss):
    return round(base * cvss['E'] * cvss['RL'] * cvss['RC'], 1)


def score_v2_environmental(exploitability, f_impact, cvss):
    adjusted_impact = min(
        10,
        10.41 * (1 -
            (1 - cvss['C'] * cvss['CR'])
            * (1 - cvss['I'] * cvss['IR'])
            * (1 - cvss['A'] * cvss['AR'])))  # https://xkcd.com/297
    verbose_score('Adjusted impact score', adjusted_impact)
    adjusted_base = round(
        ((0.6 * adjusted_impact) + (0.4 * exploitability) - 1.5) * f_impact, 1)
    verbose_score('Adjusted base score', adjusted_base)
    adjusted_temporal = score_v2_temporal(adjusted_base, cvss)
    verbose_score('Adjusted temporal score', adjusted_temporal)
    return round(
        (adjusted_temporal + (10 - adjusted_temporal) * cvss['CDP'])
        * cvss['TD'], 1)


def contains_v2_temporal(cvss):
    return any([cvss[metric] != 'ND' for metric in CVSSv2_TEMPORAL_METRICS])


def contains_v2_environmental(cvss):
    return any(
        [cvss[metric] != 'ND' for metric in CVSSv2_ENVIRONMENTAL_METRICS])


def score_v2(cvss):
    overall_score = 0
    e_cvss = score_v2_evaluate(cvss)
    base, exploitability, f_impact = score_v2_base(e_cvss)
    verbose_score('Base score', base)
    overall_score = base
    if contains_v2_temporal(cvss):
        temporal = score_v2_temporal(base, e_cvss)
        verbose_score('Temporal score', temporal)
        overall_score = temporal
    if contains_v2_environmental(cvss):
        environmental = score_v2_environmental(
            exploitability, f_impact, e_cvss)
        verbose_score('Environmental score', environmental)
        overall_score = environmental
    return overall_score


def arg_handling():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--detail", help="display detailed scoring", action="store_true",
        required=False)

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-i", "--interactive", help="enter interactive mode",
        action="store_true", required=False)
    group.add_argument(
        "vector", metavar="CVSS VECTOR", help="CVSS vector", nargs='?')
    return parser.parse_args()


args = arg_handling()

DETAIL_FLAG = args.detail

if args.vector is not None:
    cvss = parse_v2(args.vector)
elif args.interactive:
    DETAIL_FLAG = True
    print('Interactive mode!')
    cvss = {}
    print('Base')
    for metric in CVSSv2_BASE_METRICS:
        prompt = metric + ' [' + ', '.join(CVSSv2[metric]) + ']: '
        value = input(prompt)
        cvss[metric] = value
    parse_v2_fill_not_defined(cvss)
    print('Vector: ' + cvss_v2_to_vector(cvss))

overall_cvss_score = score_v2(cvss)
if DETAIL_FLAG:
    print('Overall CVSS score:' + str(overall_cvss_score))
else:
    print(overall_cvss_score)
