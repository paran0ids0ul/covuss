#!/usr/bin/env python

import sys, re

CVSSv2 = {
    'AV': {'L': 0.395, 'A': 0.646, 'N': 1.000},
    'AC': {'H': 0.350, 'M': 0.610, 'L': 0.710},
    'Au': {'M': 0.450, 'S': 0.560, 'N': 0.704},
    'C':  {'N': 0.000, 'P': 0.275, 'C': 0.660},
    'I':  {'N': 0.000, 'P': 0.275, 'C': 0.660},
    'A':  {'N': 0.000, 'P': 0.275, 'C': 0.660},

    'E':  {'U':  0, 'POC': 0, 'F': 0, 'H':  0, 'ND': 0},
    'RL': {'OF': 0, 'TF':  0, 'W': 0, 'U':  0, 'ND': 0},
    'RC': {'UC': 0, 'UR':  0, 'C': 0, 'ND': 0},

    'CDP': {'N': 0, 'L': 0, 'LM': 0, 'MH':  0, 'H':  0, 'ND': 0},
    'TD':  {'N': 0, 'L': 0, 'M':  0,  'H':  0, 'ND': 0},
    'CR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
    'IR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
    'AR':  {'L': 0, 'M': 0, 'H':  0,  'ND': 0},
}

def parse_v2(vector):
    cvss = {}
    for piece in vector.split('/'):
        try:
            (key, value) = piece.split(':')
        except:
            print('Invalid metric "' + piece + '".')
            sys.exit(1)
        if key not in CVSSv2.keys():
            print('Unknown metric "' + key + '".')
            sys.exit(1)
        if value not in CVSSv2[key].keys():
            print(
                'Invalid value "' + value
                + '" for metric "' + key + '". '
                + "Available values: " + str(CVSSv2[key].keys()))
            sys.exit(1)
        if key in cvss:
            print('Duplicate metric "' + key + '".')
            sys.exit(1)
        cvss[key] = value
    return cvss

def score(cvss):
    access_vector          = CVSSv2['AV'][cvss['AV']]
    access_complexity      = CVSSv2['AC'][cvss['AC']]
    authentication         = CVSSv2['Au'][cvss['Au']]
    confidentiality_impact = CVSSv2['C'][cvss['C']]
    integrity_impact       = CVSSv2['I'][cvss['I']]
    availabilty_impact     = CVSSv2['A'][cvss['A']]
    impact = 10.41 * (1 -
        (1 - confidentiality_impact)
        * (1 - integrity_impact)
        * (1 - availabilty_impact))
    exploitability = 20 * access_vector * access_complexity * authentication
    f_impact = 0 if impact == 0 else 1.176
    base_score = round(
        ((0.6 * impact) + (0.4 * exploitability) - 1.5) * f_impact,
        1)
    return base_score

if len(sys.argv) == 1:
    print('No args')
elif len(sys.argv) == 2:
    vector = sys.argv[1]
    print(score(parse_v2(vector)))
else:
    print('Wrong usage')
