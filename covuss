#!/usr/bin/env python

import sys
import re
import argparse

CVSSv2 = {
    'AV': {'L': 0.395, 'A': 0.646, 'N': 1},
    'AC': {'H': 0.35,  'M': 0.61,  'L': 0.71},
    'Au': {'M': 0.45,  'S': 0.56,  'N': 0.704},
    'C':  {'N': 0,     'P': 0.275, 'C': 0.66},
    'I':  {'N': 0,     'P': 0.275, 'C': 0.66},
    'A':  {'N': 0,     'P': 0.275, 'C': 0.66},

    'E':  {'U':  0.85, 'POC': 0.9,  'F': 0.95, 'H':  1, 'ND': 1},
    'RL': {'OF': 0.87, 'TF':  0.9,  'W': 0.95, 'U':  1, 'ND': 1},
    'RC': {'UC': 0.9,  'UR':  0.95, 'C': 1,    'ND': 1},

    'CDP': {'N': 0, 'L': 0.1, 'LM': 0.3, 'MH': 0.4, 'H': 0.5, 'ND': 0},
    'TD':  {'N': 0, 'L': 0.25, 'M': 0.75, 'H': 1, 'ND': 1},
    'CR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
    'IR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
    'AR':  {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1},
}

DETAIL_FLAG = False


def round_to_one_decimal(num):
    return round(num, 1)


def verbose_score(msg, score):
    if DETAIL_FLAG:
        print(msg + ':' + str(round_to_one_decimal(score)))


def ndread(cvss, key):
    return cvss[key] if key in cvss else CVSSv2[key]['ND']


def parse_v2(vector):
    cvss = {}
    for piece in vector.split('/'):
        try:
            (key, value) = piece.split(':')
        except:
            print('Invalid metric "' + piece + '".')
            sys.exit(1)
        if key not in CVSSv2.keys():
            print('Unknown metric "' + key + '".')
            sys.exit(1)
        if value not in CVSSv2[key].keys():
            print(
                'Invalid value "' + value
                + '" for metric "' + key + '". '
                + "Available values: " + ', '.join(sorted(CVSSv2[key].keys())))
            sys.exit(1)
        if key in cvss:
            print('Duplicate metric "' + key + '".')
            sys.exit(1)
        cvss[key] = CVSSv2[key][value]
    required_metrics = ['AV', 'AC', 'Au', 'C', 'I', 'A']
    for given_metric in cvss.keys():
        if given_metric in required_metrics:
            required_metrics.remove(given_metric)
    if required_metrics:
        print(
            'Missing required metrics: ' + ', '.join(sorted(required_metrics)))
        sys.exit(1)
    return cvss


def score_v2_base(cvss):
    impact = 10.41 * (1 - (1 - cvss['C']) * (1 - cvss['I']) * (1 - cvss['A']))
    verbose_score('Impact score', impact)
    exploitability = 20 * cvss['AV'] * cvss['AC'] * cvss['Au']
    verbose_score('Exploitability score', exploitability)
    f_impact = 0 if impact == 0 else 1.176
    return (
        round_to_one_decimal(
            ((0.6 * impact) + (0.4 * exploitability) - 1.5) * f_impact),
        exploitability,
        f_impact)


def score_v2_temporal(base, cvss):
    return round_to_one_decimal(
        base * ndread(cvss, 'E') * ndread(cvss, 'RL') * ndread(cvss, 'RC'))


def score_v2_environmental(exploitability, f_impact, cvss):
    adjusted_impact = min(
        10,
        10.41 * (1 -
            (1 - cvss['C'] * ndread(cvss, 'CR'))
            * (1 - cvss['I'] * ndread(cvss, 'IR'))
            * (1 - cvss['A'] * ndread(cvss, 'AR'))))  # https://xkcd.com/297
    verbose_score('Adjusted impact score', adjusted_impact)
    adjusted_base = round_to_one_decimal(
        ((0.6 * adjusted_impact) + (0.4 * exploitability) - 1.5) * f_impact)
    verbose_score('Adjusted base score', adjusted_base)
    adjusted_temporal = score_v2_temporal(adjusted_base, cvss)
    verbose_score('Adjusted temporal score', adjusted_temporal)
    return round_to_one_decimal(
        (adjusted_temporal + (10 - adjusted_temporal) * (ndread(cvss, 'CDP')))
        * ndread(cvss, 'TD'))


def should_do_temporal(cvss):
    return 'E' in cvss or 'RL' in cvss or 'RC' in cvss


def should_do_environmental(cvss):
    return 'CDP' in cvss \
        or 'TD' in cvss \
        or 'CR' in cvss \
        or 'IR' in cvss \
        or 'AR' in cvss


def score_v2(cvss):
    overall_score = 0
    base, exploitability, f_impact = score_v2_base(cvss)
    verbose_score('Base score', base)
    overall_score = base
    if should_do_temporal(cvss):
        temporal = score_v2_temporal(base, cvss)
        verbose_score('Temporal score', temporal)
        overall_score = temporal
    if should_do_environmental(cvss):
        environmental = score_v2_environmental(exploitability, f_impact, cvss)
        verbose_score('Environmental score', environmental)
        overall_score = environmental
    return overall_score


parser = argparse.ArgumentParser()
parser.add_argument(
    "-d", "--detail", help="display detailed scoring", action="store_true",
    required=False)

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument(
    "-i", "--interactive", help="enter interactive mode", action="store_true",
    required=False)
group.add_argument("vector", metavar="CVSS VECTOR", help="CVSS vector", nargs='?')

args = parser.parse_args()
DETAIL_FLAG = args.detail

if args.vector:
    overall_cvss_score = score_v2(parse_v2(args.vector))
    if DETAIL_FLAG:
        print('Overall CVSS score:' + str(overall_cvss_score))
    else:
        print(overall_cvss_score)
elif args.interactive:
    print('Interactive mode!')
